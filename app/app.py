import streamlit as st
import pandas as pd

st.set_page_config(page_title="Asistente de Evaluaci√≥n Cl√≠nica", layout="centered")

# ----------------------------
# Funci√≥n de predicci√≥n manual (simulada)
# ----------------------------
def predecir_supervivencia_simulada(input_df):
    row = input_df.iloc[0]
    proba = 0.95
    if row['cancer'] == 1:
        proba -= 0.3
    if row['epoc'] == 1:
        proba -= 0.2
    if row['enfermedad_cardiaca'] == 1:
        proba -= 0.2
    if row['diabetes'] == 1 and row['creatinina'] > 1.5:
        proba -= 0.15
    if row['edad'] > 80:
        proba -= 0.1
    if row['fumador'] == 1:
        proba -= 0.05
    if row['actividad_fisica'] == 0:
        proba -= 0.05
    if row['gastos_salud'] > 3000:
        proba -= 0.05
    return max(0.0, min(1.0, proba))

# ----------------------------
# Interfaz Streamlit
# ----------------------------

st.sidebar.title("Asistente de Evaluaci√≥n Cl√≠nica")
menu = st.sidebar.radio("Men√∫", ["Evaluaci√≥n del Riesgo", "Base de Pacientes", "Red Neuronal Predictiva"])

# ----------------------------
# Secci√≥n 1: Evaluaci√≥n individual
# ----------------------------
if menu == "Evaluaci√≥n del Riesgo":
    st.title("Evaluaci√≥n Cl√≠nica del Paciente")
    st.markdown("Complete los datos cl√≠nicos para obtener una evaluaci√≥n automatizada del estado general del paciente.")

    edad = st.slider("Edad", 18, 100, 60)
    ingresos = st.number_input("Ingresos mensuales (‚Ç¨)", 0, 10000, 1500)
    gastos = st.number_input("Gastos en salud (‚Ç¨)", 0, 5000, 300)
    glucosa = st.number_input("Glucosa (mg/dL)", 50, 300, 100)
    colesterol = st.number_input("Colesterol (mg/dL)", 100, 400, 200)
    creatinina = st.number_input("Creatinina (mg/dL)", 0.1, 10.0, 1.2)
    leucocitos = st.number_input("Leucocitos", 3000, 20000, 7000)

    cancer = st.selectbox("¬øDiagn√≥stico de c√°ncer?", ["No", "S√≠"])
    cardiaca = st.selectbox("¬øEnfermedad card√≠aca diagnosticada?", ["No", "S√≠"])
    epoc = st.selectbox("¬øEPOC diagnosticado?", ["No", "S√≠"])
    hipertension = st.selectbox("¬øHipertensi√≥n arterial?", ["No", "S√≠"])
    diabetes = st.selectbox("¬øDiabetes diagnosticada?", ["No", "S√≠"])
    fumador = st.selectbox("¬øFumador activo?", ["No", "S√≠"])
    obesidad = st.selectbox("¬øDiagn√≥stico de obesidad?", ["No", "S√≠"])

    actividad_fisica = st.selectbox("Nivel de actividad f√≠sica", ["0 - Sedentario", "1 - Moderado", "2 - Activo"])
    actividad_fisica_valor = int(actividad_fisica[0])

    if st.button("Evaluar"):
        input_df = pd.DataFrame({
            'edad': [edad],
            'ingresos_mensuales': [ingresos],
            'gastos_salud': [gastos],
            'glucosa': [glucosa],
            'colesterol': [colesterol],
            'creatinina': [creatinina],
            'leucocitos': [leucocitos],
            'actividad_fisica': [actividad_fisica_valor],
            'cancer': [1 if cancer == "S√≠" else 0],
            'enfermedad_cardiaca': [1 if cardiaca == "S√≠" else 0],
            'epoc': [1 if epoc == "S√≠" else 0],
            'hipertension': [1 if hipertension == "S√≠" else 0],
            'diabetes': [1 if diabetes == "S√≠" else 0],
            'fumador': [1 if fumador == "S√≠" else 0],
            'obesidad': [1 if obesidad == "S√≠" else 0],
        })

        proba = predecir_supervivencia_simulada(input_df)

        # -------------------- Resumen Cl√≠nico --------------------
        st.subheader("Resumen del Perfil Cl√≠nico")
        resumen = []
        resumen.append("Paciente mayor" if edad > 80 else "Paciente joven" if edad < 40 else "Paciente adulto")
        if cancer == "S√≠":
            resumen.append("con diagn√≥stico de c√°ncer")
        elif epoc == "S√≠":
            resumen.append("con EPOC")
        elif cardiaca == "S√≠":
            resumen.append("con enfermedad card√≠aca")
        elif diabetes == "S√≠":
            resumen.append("con diabetes")
        else:
            resumen.append("sin patolog√≠as cr√≠ticas actuales")
        st.markdown("**" + ", ".join(resumen).capitalize() + ".**")

        # -------------------- Probabilidad --------------------
        st.subheader("Probabilidad de estabilidad cl√≠nica")
        if proba > 0.8:
            st.success(f"{proba*100:.1f}%")
        elif proba > 0.6:
            st.warning(f"{proba*100:.1f}%")
        else:
            st.error(f"{proba*100:.1f}%")

        # -------------------- Aspectos --------------------
        factores = []
        positivos = []

        if edad > 80:
            factores.append("Edad avanzada (>80 a√±os)")
        elif edad < 40:
            positivos.append("Edad joven (<40 a√±os)")
        if cancer == "S√≠":
            factores.append("Diagn√≥stico de c√°ncer")
        if epoc == "S√≠":
            factores.append("Antecedente de EPOC")
        if cardiaca == "S√≠":
            factores.append("Enfermedad card√≠aca")
        if diabetes == "S√≠" and creatinina > 1.5:
            factores.append("Diabetes con deterioro renal")
        if fumador == "S√≠":
            factores.append("Tabaquismo activo")
        if actividad_fisica_valor == 0:
            factores.append("Sedentarismo")
        if gastos > 3000:
            factores.append("Gastos elevados en salud")
        if actividad_fisica_valor == 2:
            positivos.append("Buena actividad f√≠sica")
        if fumador == "No":
            positivos.append("No fumador")
        if cancer == "No" and cardiaca == "No" and epoc == "No":
            positivos.append("Sin patolog√≠as cr√≠ticas actuales")

        st.subheader("Aspectos a considerar")
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**Factores de riesgo**")
            if factores:
                for f in factores:
                    st.markdown(f"- {f}")
            else:
                st.markdown("- Ninguno relevante")
        with col2:
            st.markdown("**Aspectos positivos**")
            if positivos:
                for p in positivos:
                    st.markdown(f"- {p}")
            else:
                st.markdown("- Ninguno destacado")

        # -------------------- Sugerencias --------------------
        st.subheader("Sugerencias para el paciente")
        sugerencias = []
        if cancer == "S√≠":
            sugerencias.append("Derivar a oncolog√≠a para seguimiento peri√≥dico.")
        if epoc == "S√≠":
            sugerencias.append("Valoraci√≥n por neumolog√≠a y pruebas de funci√≥n respiratoria.")
        if cardiaca == "S√≠":
            sugerencias.append("Control cardiol√≥gico y seguimiento con ECG y ecocardiograma.")
        if diabetes == "S√≠":
            sugerencias.append("Reducir consumo de az√∫cares y programar revisi√≥n endocrinol√≥gica.")
        if fumador == "S√≠":
            sugerencias.append("Ofrecer programas de cesaci√≥n tab√°quica y evaluaci√≥n respiratoria.")
        if actividad_fisica_valor == 0:
            sugerencias.append("Recomendar inicio progresivo de actividad f√≠sica supervisada.")

        if sugerencias:
            for s in sugerencias:
                st.markdown(f"- {s}")
        else:
            st.markdown("No se requieren acciones inmediatas, mantener controles rutinarios.")

        with st.expander("Ver datos ingresados"):
            st.dataframe(input_df.T)

# ----------------------------
# Secci√≥n 2: Visualizaci√≥n de pacientes
# ----------------------------
elif menu == "Base de Pacientes":
    st.title("Base de Pacientes Clasificados")
    st.markdown("""
    Visualizaci√≥n de una muestra representativa de pacientes con su **probabilidad estimada de supervivencia**.

    Las filas est√°n codificadas por colores para facilitar la revisi√≥n cl√≠nica diaria:

    - üü• **Rojo**: Paciente en estado cr√≠tico 
    - üü® **Amarillo**: Paciente preocupante 
    - üü© **Verde**: Paciente estable 

    """)

    try:
        df = pd.read_csv("pacientes_con_probabilidad.csv")
        df_sample = df.sample(n=15, random_state=42).reset_index(drop=True)

        # ---------------- Estilo de colores en la tabla ----------------
        def highlight_row(row):
            val = row['probabilidad_supervivencia']
            if val > 0.8:
                color = '#d4edda'  # verde
            elif val > 0.6:
                color = '#fff3cd'  # amarillo
            else:
                color = '#f8d7da'  # rojo
            return ['background-color: {}'.format(color)] * len(row)

        styled_df = df_sample.style.apply(highlight_row, axis=1).hide(axis='index')
        st.dataframe(styled_df, use_container_width=True)

        # ---------------- Clasificaci√≥n y sugerencias ----------------
        def clasificar_paciente(row):
            if row['probabilidad_supervivencia'] < 0.6:
                return "Atenci√≥n m√©dica urgente"
            elif row['probabilidad_supervivencia'] < 0.8:
                return "Seguimiento sugerido"
            else:
                return "Estable"

        def sugerencia_medica(row):
            sugerencias = []
            if row.get('cancer', 0) == 1:
                sugerencias.append("Derivar a oncolog√≠a")
            if row.get('epoc', 0) == 1:
                sugerencias.append("Consulta en neumolog√≠a")
            if row.get('enfermedad_cardiaca', 0) == 1:
                sugerencias.append("Evaluaci√≥n cardiol√≥gica")
            if row.get('colesterol', 0) > 240:
                sugerencias.append("Control de l√≠pidos")
            if row.get('diabetes', 0) == 1:
                sugerencias.append("Consulta endocrina")
            return ", ".join(sugerencias) if sugerencias else "Sin acciones inmediatas"

        df_sample['nivel_atencion'] = df_sample.apply(clasificar_paciente, axis=1)
        df_sample['sugerencia'] = df_sample.apply(sugerencia_medica, axis=1)

        # ---------------- Resumen del d√≠a ----------------
        st.markdown("### Resumen de revisi√≥n cl√≠nica autom√°tica")
        urgentes = df_sample[df_sample['nivel_atencion'] == "Atenci√≥n m√©dica urgente"]
        seguimiento = df_sample[df_sample['nivel_atencion'] == "Seguimiento sugerido"]
        estables = df_sample[df_sample['nivel_atencion'] == "Estable"]

        st.markdown(f"- **Pacientes en estado cr√≠tico**: {len(urgentes)}")
        st.markdown(f"- **Pacientes en seguimiento**: {len(seguimiento)}")
        st.markdown(f"- **Pacientes estables**: {len(estables)}")
        st.markdown(f"- **Total de citas sugeridas**: {len(urgentes)}")

        # ---------------- Tabla pacientes urgentes ----------------
        st.markdown("###  Asignaci√≥n de citas cl√≠nicas para pacientes cr√≠ticos")

        if not urgentes.empty:
            # Crear tabla binaria de derivaciones por especialidad
            citas_data = []
            for idx, row in urgentes.iterrows():
                citas_data.append({
                    "ID": row['id'] if 'id' in row else idx + 1,
                    "Edad": row['edad'],
                    "Estabilidad (%)": f"{row['probabilidad_supervivencia']*100:.1f}",
                    "Oncolog√≠a": "‚úÖ" if row['cancer'] == 1 else "",
                    "Cardiolog√≠a": "‚úÖ" if row['enfermedad_cardiaca'] == 1 else "",
                    "Neumolog√≠a": "‚úÖ" if row['epoc'] == 1 else "",
                    "Endocrinolog√≠a": "‚úÖ" if row['diabetes'] == 1 else "",
                    "Control de l√≠pidos": "‚úÖ" if row['colesterol'] > 240 else ""
                })

            citas_df = pd.DataFrame(citas_data)

            # Mostrar la tabla con estilo
            st.dataframe(citas_df.style.set_properties(**{
                'text-align': 'center'
            }), use_container_width=True)

            # Bot√≥n de descarga
            csv = citas_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label=" Descargar listado de citas",
                data=csv,
                file_name='citas_pacientes_criticos.csv',
                mime='text/csv'
            ) 
        else:
            st.success("No hay pacientes que requieran atenci√≥n m√©dica urgente en esta muestra.")
    except FileNotFoundError:
        st.error("El archivo 'pacientes_con_probabilidad.csv' no se ha encontrado.")

elif menu == "Red Neuronal Predictiva":
    st.title(" Modelo de Red Neuronal para Evaluaci√≥n Cl√≠nica")

    st.markdown("""
    Hemos desarrollado y entrenado una red neuronal para estimar la **probabilidad de estabilidad cl√≠nica** de un paciente
    en funci√≥n de variables cl√≠nicas, sociodemogr√°ficas y de estilo de vida.
    """)
    st.markdown("""
    La arquitectura del modelo base se compone de una red neuronal sencilla pero eficaz, entrenada con datos cl√≠nicos reales de pacientes.  
    Este modelo toma como entrada  variables cl√≠nicas, demogr√°ficas y de estilo de vida del paciente y est√° dise√±ado con:

    - Una **capa** de 16 neuronas con funci√≥n de activaci√≥n *ReLU*, que permite modelar relaciones no lineales complejas entre las variables.
    - Una **capa de Dropout** con probabilidad del 40‚ÄØ% para prevenir el *overfitting*, desactivando aleatoriamente algunas neuronas durante el entrenamiento.
    - Una **capa de salida** con una √∫nica neurona y activaci√≥n *sigmoid*, que devuelve un valor entre 0 y 1, interpretado como la **probabilidad estimada de supervivencia** del paciente.
                
    Esta salida binaria permite clasificar a los pacientes como  **alto riesgo (0)** o **estables(1)**.
    """)
    col1, col2, col3 = st.columns([1, 3, 1])
    with col2:
        st.image("img/baseline_model.png", caption="Arquitectura red")
    

    # ---------------------------
    st.subheader(" Curva de aprendizaje")
    st.markdown("""
    La evoluci√≥n de la p√©rdida (*loss*) en el entrenamiento y validaci√≥n muestra una tendencia estable y descendente,
    lo que indica que el modelo **aprende correctamente sin sobreajustarse**.
    """)
    st.image("img/loss_fuc.png", caption="Curva de p√©rdida en entrenamiento y validaci√≥n")

    # ---------------------------
    st.subheader(" Matriz de confusi√≥n")
    st.markdown("""
    El modelo ha sido ajustado para priorizar la **minimizaci√≥n de errores en pacientes de alto riesgo cl√≠nico** (clase 0), 
    es decir, aquellos con baja probabilidad de supervivencia. El objetivo principal ha sido **maximizar el *Recall*** sobre estos casos 
    cr√≠ticos para **reducir los falsos negativos**, es decir, evitar clasificar err√≥neamente como supervivientess a pacientes que fallecer√°n.

    Durante el proceso de entrenamiento, se probaron t√©cnicas espec√≠ficas para abordar el fuerte desbalance en las clases:

    - **Undersampling** de la clase mayoritaria.
    - **Class weights** para penalizar m√°s los errores sobre la clase minoritaria.
    - **Focal Loss**, una funci√≥n de p√©rdida adaptada a escenarios con desbalance extremo.

    A pesar de estos esfuerzos, **no se lograron mejoras significativas en el rendimiento predictivo sobre la clase minoritaria**. Se concluye que, para avanzar, es necesario **contar con m√°s muestras de pacientes con desenlace adverso (clase 0)**, 
    ya que el desbalance actual **limita la capacidad del modelo para aprender patrones representativos** en esos casos.
    """)
    st.image("img/cfm.png", caption="Matriz de confusi√≥n en el conjunto de validaci√≥n")

    # ---------------------------
    
    st.subheader("Aplicaciones futuras")
    st.markdown("""
    Este modelo puede ser integrado como un **sistema de apoyo a la decisi√≥n m√©dica**, permitiendo:

    - **Monitorizar autom√°ticamente** la estabilidad cl√≠nica de los pacientes tras cada consulta.
    - **Asignar citas peri√≥dicas o derivaciones** a especialistas en funci√≥n del perfil cl√≠nico del paciente.
    - **Enviar recordatorios autom√°ticos** (v√≠a email o sistema interno) a pacientes clasificados como preocupantes, sin necesidad de intervenci√≥n directa del m√©dico.
    - **Visualizar diariamente los pacientes atendidos**, clasificados por niveles de riesgo, para priorizar actuaciones.

    Con este sistema, el profesional sanitario podr√≠a identificar r√°pidamente:
    - Qu√© pacientes requieren atenci√≥n urgente o seguimiento estrecho.
    - Qu√© pacientes pueden mantenerse en control rutinario.
    - Qu√© especialidades m√©dicas deben intervenir en cada caso (oncolog√≠a, neumolog√≠a, etc.).


    """)
    